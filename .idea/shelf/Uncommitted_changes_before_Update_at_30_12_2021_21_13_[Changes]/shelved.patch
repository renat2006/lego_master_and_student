Index: load_design_level1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logic.load_image\r\nimport logic.constants\r\nfrom generate_level import *\r\nimport pygame\r\nimport data\r\n\r\n#код Айгуль----------\r\n\r\ndef load_fon(fon_name, screen):\r\n    fon = pygame.transform.scale(load_image(fon_name), (1400, 840))\r\n    screen.fill(\"White\")\r\n    screen.blit(fon, (0, 0))\r\n\r\n\r\ndef load_level(filename):\r\n    with open(filename, 'r') as mapFile:\r\n        level_map = [line.strip() for line in mapFile]\r\n    max_width = max(map(len, level_map))\r\n    return list(map(lambda x: x.ljust(max_width, '.'), level_map))\r\n\r\n\r\ndef generate_level(level):\r\n    new_player, x, y = None, None, None\r\n    for y in range(len(level)):\r\n        for x in range(len(level[y])):\r\n            if level[y][x] == '#':\r\n                Tile('wall', x, y)\r\n            elif level[y][x] == '-':\r\n                Tile('plate', x, y)\r\n            elif level[y][x] == '@':\r\n                new_player = Player(x, y)\r\n    return new_player, x, y
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/load_design_level1.py b/load_design_level1.py
--- a/load_design_level1.py	(revision b2d3b277d356e3d0fbd96639b6af8fda9fc31b64)
+++ b/load_design_level1.py	(date 1640887989240)
@@ -4,11 +4,12 @@
 import pygame
 import data
 
-#код Айгуль----------
+
+# код Айгуль----------
 
 def load_fon(fon_name, screen):
-    fon = pygame.transform.scale(load_image(fon_name), (1400, 840))
-    screen.fill("White")
+    fon = pygame.transform.scale(load_image(fon_name), (logic.constants.WIDTH, logic.constants.HEIGHT))
+
     screen.blit(fon, (0, 0))
 
 
@@ -29,4 +30,4 @@
                 Tile('plate', x, y)
             elif level[y][x] == '@':
                 new_player = Player(x, y)
-    return new_player, x, y
\ No newline at end of file
+    return new_player, x, y
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from logic.screen_and_init import *\r\nfrom logic.start_screen import *\r\nfrom logic.menu import *\r\nimport logic.constants\r\nfrom logic.player import *\r\n\r\nscreen, clock = init(logic.constants.SIZE)\r\nstart_screen(screen, clock)\r\nload_menu(screen, clock)\r\nrunning = True\r\njumping = False\r\nplayer = Player(\"data/player.png\", (5, 400))\r\n\r\n# Код Димы ------------------------------------\r\ndef jump(obj):\r\n    space = -15\r\n    while space <= 15:\r\n        obj.move(0, space)\r\n        space += 1\r\n        screen.fill(\"Black\")\r\n        screen.fill(\"White\", (0, 500, logic.constants.WIDTH, 10))\r\n        obj.update()\r\n        player_group.draw(screen)\r\n        pygame.time.delay(20)\r\n\r\n        pygame.display.flip()\r\n#-------------------------------------------------\r\n\r\n# Код Рената --------------------------------------\r\n\r\nwhile running:\r\n    for event in pygame.event.get():\r\n\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n        elif event.type == pygame.KEYDOWN:\r\n            if event.key == pygame.K_ESCAPE:\r\n                running = False\r\n            # Код Димы --------------------------------------\r\n            if event.key == pygame.K_SPACE:\r\n                jump(player)\r\n\r\n            if event.key == pygame.K_LEFT:\r\n                player.move(-logic.constants.STEP, 0)\r\n            if event.key == pygame.K_RIGHT:\r\n                player.move(logic.constants.STEP, 0)\r\n    screen.fill('black')\r\n\r\n    screen.fill(\"White\", (0, 500, logic.constants.WIDTH, 10))\r\n\r\n    player_group.draw(screen)\r\n    player_group.update()\r\n\r\n    clock.tick(logic.constants.FPS)\r\n    pygame.display.flip()\r\n\r\n#------------------------------------------------------
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision b2d3b277d356e3d0fbd96639b6af8fda9fc31b64)
+++ b/main.py	(date 1640887989256)
@@ -3,7 +3,8 @@
 from logic.menu import *
 import logic.constants
 from logic.player import *
-
+from load_design_level1 import *
+import  load_design_level1
 screen, clock = init(logic.constants.SIZE)
 start_screen(screen, clock)
 load_menu(screen, clock)
@@ -27,7 +28,7 @@
 #-------------------------------------------------
 
 # Код Рената --------------------------------------
-
+player, level_x, level_y = load_design_level1.generate_level(load_design_level1.load_level('level1.txt'))
 while running:
     for event in pygame.event.get():
 
@@ -47,7 +48,7 @@
     screen.fill('black')
 
     screen.fill("White", (0, 500, logic.constants.WIDTH, 10))
-
+    load_fon('data/fon_city.png', screen)
     player_group.draw(screen)
     player_group.update()
 
Index: logic/load_image.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from logic.imports import *\r\n\r\n\r\ndef load_image(name, color_key=None):\r\n    if not os.path.isfile(name):\r\n        print(f\"Файл с изображением '{name}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(name)\r\n\r\n    if color_key is not None:\r\n        if color_key == -1:\r\n            color_key = image.get_at((0, 0))\r\n        image.set_colorkey(color_key)\r\n    return image\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/load_image.py b/logic/load_image.py
--- a/logic/load_image.py	(revision b2d3b277d356e3d0fbd96639b6af8fda9fc31b64)
+++ b/logic/load_image.py	(date 1640887989256)
@@ -7,8 +7,8 @@
         sys.exit()
     image = pygame.image.load(name)
 
-    if color_key is not None:
-        if color_key == -1:
-            color_key = image.get_at((0, 0))
-        image.set_colorkey(color_key)
+    # if color_key is not None:
+    #     if color_key == -1:
+    #         color_key = image.get_at((0, 0))
+    #     image.set_colorkey(color_key)
     return image
